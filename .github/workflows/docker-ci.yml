name: CI · Tests en Docker y Publicación

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  ci:
    runs-on: ubuntu-latest

    steps:
      # 1) Chequea el código
      - name: Checkout repo
        uses: actions/checkout@v4

      # 2) Prepara Docker Buildx (soporte para múltiples stages)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 3) Construye sólo el stage de tests
      - name: Build test image
        run: docker build --target test -t myapp-test .

      # 4) Ejecuta tests + cobertura, exportando coverage/ al workspace
      - name: Run tests & generate coverage
        run: |
          mkdir -p coverage
          docker run --rm \
            -v "${{ github.workspace }}/coverage":/src/coverage \
            myapp-test

      # 5) Sube el reporte de cobertura
      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage/

      # 6) Extrae metadata para tagging
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ vars.DOCKER_USERNAME }}/rpg-name-generator

      # 7) Loguea en Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 8) Construye y (si no es PR) publica la imagen de producción
      - name: Build & push release image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          annotations: ${{ steps.meta.outputs.annotations }}
